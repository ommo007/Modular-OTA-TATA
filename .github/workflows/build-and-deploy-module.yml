name: '🚀 Build & Deploy OTA Modules'

on:
  push:
    branches: [ main ]
    paths:
      - 'mock_drivers/**'
  workflow_dispatch:

env:
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}

jobs:
  build-and-deploy:
    name: 'Build & Deploy Changed Modules'
    runs-on: ubuntu-latest
    outputs:
      any_modules_deployed: ${{ steps.deploy.outputs.any_modules_deployed }}

    steps:
      - name: '🛒 Checkout Repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: '🔍 Detect Changed Module Files'
        id: changed_files
        uses: tj-actions/changed-files@v41
        with:
          files: mock_drivers/**

      - name: '🛠️ Setup ESP32 Toolchain & Dependencies'
        if: steps.changed_files.outputs.any_changed == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y wget jq
          cd /tmp
          wget https://dl.espressif.com/dl/xtensa-esp32-elf-gcc8_4_0-esp-2021r2-linux-amd64.tar.gz
          tar -xzf xtensa-esp32-elf-gcc8_4_0-esp-2021r2-linux-amd64.tar.gz
          sudo mv xtensa-esp32-elf /opt/
          echo "/opt/xtensa-esp32-elf/bin" >> $GITHUB_PATH
          xtensa-esp32-elf-gcc --version

      - name: '🔧 Prepare Deployment Script'
        if: steps.changed_files.outputs.any_changed == 'true'
        run: chmod +x ./scripts/deploy-to-supabase.sh

      - name: '🏗️ Build & Deploy Changed Modules'
        id: deploy
        if: steps.changed_files.outputs.any_changed == 'true'
        run: |
          # Use a variable to track if any deployment happened
          deployed_something=false
          
          changed_modules=$(echo "${{ steps.changed_files.outputs.all_changed_files }}" | tr ' ' '\n' | grep -oP 'mock_drivers/\K[^/]+' | sort -u)
          
          if [ -z "$changed_modules" ]; then
            echo "✅ No module directories were changed. Nothing to deploy."
            echo "any_modules_deployed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          
          echo "📦 Modules to process:"
          echo "$changed_modules"
          
          overall_status=0
          
          echo "$changed_modules" | while read module; do
            echo "--- Processing Module: $module ---"
            
            # 1. Build the module using make's -C flag (no need to cd)
            echo "🔨 Building module..."
            if ! make -C "mock_drivers/$module" clean || ! make -C "mock_drivers/$module" build; then
              echo "❌ Build failed for: $module"
              overall_status=1
              continue # Skip to the next module
            fi
            
            # 2. Verify the binary exists before trying to deploy
            binary_path="mock_drivers/$module/build/$module.bin"
            echo "✅ Build successful. Verifying binary at: $binary_path"
            if [ ! -f "$binary_path" ]; then
                echo "❌ CRITICAL: Build succeeded but binary not found at '$binary_path'!"
                overall_status=1
                continue
            fi

            # 3. Deploy the verified binary
            echo "🚀 Deploying module: $module"
            if ! ./scripts/deploy-to-supabase.sh "$module" "$binary_path"; then
              echo "❌ Deployment script failed for: $module"
              overall_status=1
              continue
            fi
            
            # If we got this far, a deployment happened
            deployed_something=true
            echo "✅ Successfully processed module: $module"
          done
          
          if [ "$overall_status" -ne 0 ]; then
            echo "❌ One or more modules failed to process."
            exit 1
          fi
          
          echo "any_modules_deployed=$deployed_something" >> "$GITHUB_OUTPUT"
          echo "✅ All changed modules processed successfully."

      # The rest of the workflow (summary and validation jobs) can remain as is.
      # ...