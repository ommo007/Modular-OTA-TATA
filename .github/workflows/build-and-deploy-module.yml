name: '🚀 Build & Deploy OTA Modules'

on:
  push:
    branches: [ main ]
    paths:
      - 'mock_drivers/**'
  workflow_dispatch:

env:
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}

jobs:
  build-and-deploy:
    name: 'Build & Deploy Changed Modules'
    runs-on: ubuntu-latest
    outputs:
      any_modules_deployed: ${{ steps.deploy.outputs.any_modules_deployed }}

    steps:
      - name: '🛒 Checkout Repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: '🔍 Detect Changed Module Files'
        id: changed_files
        uses: tj-actions/changed-files@v41
        with:
          files: mock_drivers/**

      - name: '🛠️ Setup ESP32 Toolchain'
        if: steps.changed_files.outputs.any_changed == 'true'
        run: |
          echo "Installing ESP32 toolchain dependencies..."
          sudo apt-get update
          sudo apt-get install -y wget flex bison gperf python3 python3-pip python3-venv cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0 jq
          
          echo "Downloading and installing ESP32 toolchain..."
          cd /tmp
          wget https://dl.espressif.com/dl/xtensa-esp32-elf-gcc8_4_0-esp-2021r2-linux-amd64.tar.gz
          tar -xzf xtensa-esp32-elf-gcc8_4_0-esp-2021r2-linux-amd64.tar.gz
          sudo mv xtensa-esp32-elf /opt/
          
          echo "Adding toolchain to PATH..."
          echo "/opt/xtensa-esp32-elf/bin" >> $GITHUB_PATH
          
          echo "Verifying toolchain installation..."
          export PATH="/opt/xtensa-esp32-elf/bin:$PATH"
          which xtensa-esp32-elf-gcc
          xtensa-esp32-elf-gcc --version

      - name: '🔧 Verify Toolchain Setup'
        if: steps.changed_files.outputs.any_changed == 'true'
        run: |
          echo "Final toolchain verification..."
          which xtensa-esp32-elf-gcc || (echo "❌ Toolchain not found in PATH" && exit 1)
          xtensa-esp32-elf-gcc --version
          echo "✅ Toolchain setup verified"

      - name: '🔐 Validate Environment Variables'
        if: steps.changed_files.outputs.any_changed == 'true'
        run: |
          if [ -z "$SUPABASE_URL" ] || [ -z "$SUPABASE_SERVICE_KEY" ]; then
            echo "❌ Error: Missing required secrets"
            exit 1
          fi
          echo "✅ Environment variables validated"

      - name: '🔧 Prepare Deployment Script'
        if: steps.changed_files.outputs.any_changed == 'true'
        run: |
          chmod +x ./scripts/deploy-to-supabase.sh

      - name: '🏗️ Build & Deploy Changed Modules'
        id: deploy
        if: steps.changed_files.outputs.any_changed == 'true'
        run: |
          echo "Changed files: ${{ steps.changed_files.outputs.all_changed_files }}"
          
          # Extract unique module directories from changed files
          changed_modules=$(echo "${{ steps.changed_files.outputs.all_changed_files }}" | tr ' ' '\n' | grep -E '^mock_drivers/[^/]+/' | sed 's|mock_drivers/\([^/]*\)/.*|\1|' | sort -u)
          
          if [ -z "$changed_modules" ]; then
            echo "✅ No module directories were changed. Nothing to do."
            exit 0
          fi
          
          echo "📦 Modules to process:"
          echo "$changed_modules"
          
          build_or_deploy_failed=false
          
          # Loop through and process each module
          echo "$changed_modules" | while read module; do
            echo "--- Processing Module: $module ---"
            
            # 1. Build the module
            echo "🔨 Building module: $module"
            if ! make -C "mock_drivers/$module" clean || ! make -C "mock_drivers/$module" build; then
              echo "❌ Build failed for: $module"
              build_or_deploy_failed=true
              continue # Skip to the next module
            fi
            echo "✅ Build successful for: $module"

            # 2. Deploy the module
            binary_path="mock_drivers/$module/build/$module.bin"
            echo "🚀 Deploying module: $module from $binary_path"
            if ! ./scripts/deploy-to-supabase.sh "$module" "$binary_path"; then
              echo "❌ Deployment failed for: $module"
              build_or_deploy_failed=true
              continue # Skip to the next module
            fi
            echo "✅ Deployment successful for: $module"
          done
          
          if [ "$build_or_deploy_failed" = true ]; then
            echo "❌ One or more modules failed to build or deploy."
            exit 1
          fi
          
          echo "any_modules_deployed=true" >> "$GITHUB_OUTPUT"
          echo "✅ All changed modules processed successfully."

      - name: '📊 Report Deployment Summary'
        if: always()
        run: |
          echo "=========================================="
          echo "🎯 DEPLOYMENT SUMMARY"
          echo "=========================================="
          if [ "${{ steps.changed_files.outputs.any_changed }}" != 'true' ]; then
            echo "ℹ️ No module changes were detected in the push."
          elif [ "${{ job.status }}" == "success" ]; then
            echo "✅ SUCCESS: All changed modules were built and deployed."
          else
            echo "❌ FAILED: The workflow encountered an error."
          fi
          echo "=========================================="

  validate-deployment:
    name: 'Validate Deployment'
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: success() && needs.build-and-deploy.outputs.any_modules_deployed == 'true'
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
    steps:
      - name: '✅ Validate Manifest Accessibility'
        run: |
          echo "🔍 Checking if manifest is accessible..."
          # Give storage a moment to become consistent
          sleep 5 
          if curl --fail -s -H "Authorization: Bearer ${{ env.SUPABASE_SERVICE_KEY }}" "${{ env.SUPABASE_URL }}/storage/v1/object/public/$SUPABASE_BUCKET/manifest.json" > /dev/null; then
            echo "✅ Manifest is accessible and valid."
          else
            echo "❌ ERROR: Manifest is not accessible. Please check Supabase storage."
            exit 1
          fi
          echo "🎉 Deployment validation completed successfully."